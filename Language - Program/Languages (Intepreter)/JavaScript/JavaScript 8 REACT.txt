
*React Documentation
_How to insall globally			->		npm install -g create-react-app


*Iterators 
_The same process as for each function. Loop for finding element. Start from first element. {}Block body for multiples lines.
	nameObject.find( (storeVariable) => condition)		->	Finding and returning the first element that meets a condition or true (first answer, output = first answer that's true)
	nameObject.filter( (storeVariable) => condition)	->	Finding and returning a list of elements that meet a condition or true (all answer, output = all answer that's true)
	nameObject.map( (storeVariable) => condition)		->	Modifying each element and returning the modified array, editing array using loop, map will return the full size where as filter will return only whats true 
									(all answer, output = all answer that's true and false)
	nameObject.reduce( (accumulator, currentValue, currentIndex) => accumulator + currentValue, initialValue)	->	Creating a summary or aggregation of values in an array (summary of all array, output = combine answer)
														accumulator = The value resulting from the previous call to callbackFn. On the first call, its value is initialValue if the latter is specified; otherwise its value is array[0].
														currentValue = The value of the current element. On the first call, its value is array[0] if initialValue is specified; otherwise its value is array[1].
														currentIndex = The index position of currentValue in the array. On the first call, its value is 0 if initialValue is specified, otherwise 1.


*Ellipsis
_Similar to + in concatenation. This is use for Array ONLY. ONLY USE ELLIPSIS AT THE END!!!	
_Syntax						->	...somethingName
_Use In Rest Parameters (function)		->	Gathers the rest of the list of arguments into an array. Copy and paste in array. We want to put it as at the last parameter!!!
_Use In Spread Operator (copy array)		->	Expands an array into a list. Use when you want to shallow copy in array.
	

*Destructing
_This is use for Object ONLY. Changing the index name.
_Syntax						->	{ indexNameOld: indexNameNew } = objectName
_To copy the rest of object element		->	{ indexNameOld: indexNameNew, ...newObjectForTheRestOfTheElements } = objectName


*Introduction to React
_People argue as a framework or JavaScript-based UL development library
_Rendering webpage, which means they are updating themselves without affecting the rest of the website. Rendering only the one that you want.
_So they are easy to create of dynamic applications, improved performance, reusable components
_Unidirectional data flow (can pass down data from parent to sibling and not just sibling to sibling)
_Use declarative paradigm (Descript what the program does instead of describing how the program should do something)
_Create our own HTML element, Combining all the file HTML, CSS and JS into one
_Companies that use react: Airbnb, Uber, Facebook, Netflix, Instagram, Medium, Pinterest, Twitter, Reddit.


*Features of React
_Uses JSX	->	A JavaScript syntactic extension, neither a string nor HTML, instead embeds HTML into JavaScript code.
_Virtual DOM	->	When an object's state changes, it updates only that object in the real DOM, only re-rendering a portion and not the whole thing.
_MVC Architecture->	_MVC is an architectural pattern that splits application layer into Model, View and Controller.
			_Model: relates to all data-related logic (interface with database)
			_View: used for UL logic of the application (what user is seeing)
			_Controller: interface between Model and View (rendering the form)
_One-way data binding


*CodeSandbox
_Browser base developer environment		->		https://codesandbox.io/
_Easy to install dependencies


*Introduction to JSX and Babel
_JSX is a JavaScript extension that allows creation of Document Object Model trees using an XML-like syntax.
_Babel allow you to transfer from XML to Plain JavaScript for easier understanding.		->		https://babeljs.io/
_Automate prettify code when save.


*React Template 	

  src/index.js
        import React from "react";		// This line imports the React library, which is necessary for writing React code.
        import ReactDOM from "react-dom";	// This line imports the ReactDOM library, which is used for rendering React components in the DOM (Document Object Model).

        ReactDOM.render(			// This is a method provided by ReactDOM for rendering React elements into the DOM.
        <>					// There can only be one main element, can also do <div> or <React.Fragment>
            <h1>My Favourite Foods</h1>		// ReactDOM.render(what to show, where to show)
            <ul>
            <li>Bacon</li>
            <li>Jamon</li>
            <li>Noodles</li>
            </ul>
        </>,
        document.getElementById("root")		// This part of the code selects an HTML element with the id "root"
        );

_Always put seft closing tag in HTML no matter what, etc. <br/> <input/>
_If you want a JavaScript function then wrap it in, similar to EJS 	->	{}
_Can not write JavaScript statement, can only write expression.
_Statement is a set of instruction. Expression is asking for a value.
_Class = "name" does not work in react. So we need to use		->	className = name (can only do this in HTML tag and not React Components Tag)
_HTML Global Attributes - attributes work for all HTML elements.
_Eg. contentEditable="true" (allow to edit content of an element). ALWAYS MAKE THEM CAMEL CASE!!!
_Website to change the style for image					->	https://picsum.photos/
_Inline styling, first is JavaScript for css then JavaScript in ReactDOM->	style={{color: "red"}}
_We want to use inline styling to change on the go			->	customStyle.color = "blue"
_React fragment used so that you dont get confuse with <div>		->	<> </>
_React fragment used cases: Return Multiple Elements, Conditional Rendering and Arrays (Key props) 


*Components in React
_Components are the building blocks that comprise a React application representing a part of the user interface.
_Components are like function()
_Components are name in capital letters to differentiate with the DOM, example function Heading(){}
_To call components				->		<Heading />
_Refer to this for best practice		->		https://github.com/airbnb/javascript/tree/master/react
_Components are usually store in a seperate file (App.jsx)

   src/App.jsx
	import React from "react";						
	
	function App() {
	    return <Heading />;							// Components are name in capital letters to differentiate with the DOM, example function <Heading />
	}

	export default App;							// export the function App()


   src/index.js
        import React from "react";
        import ReactDOM from "react-dom";
	import App from "./components/App"					// import export default App() from App.jsx, can name App any name.

        ReactDOM.render(<App />, document.getElementById("root"));


_To import and export multiple variables, you must add {}, eg.

   src/App.jsx
	function App() {
	  return (
	    <div>
	      <Header />
	      <Note />
	      <Footer />
	    </div>
	  );
	}

	export default App;							
	export {Heading, Footing};						// if its a function then no bracket until inside ReactDOM.render{}; because you are calling it not invoking


   src/index.js
	import App, {Heading, Footing} from "./components/App"			// if the names are not default (App), then you must call the same name as the one you are exporting.
										// We can restructure the name as well import App, {Heading as NewHeadering}


*Create React App
_Create an app								->	create-react-app filename
_src folder is where we will be creating all our component		->	cd filename
_In CLI to initialise react (look at package.json)			->	npm start
_Remove unnecessary files in public folder				->	robit.txt, manifest.json, logo512.png, logo192.png
_Render specified components in return statement
_Where we will render our application					->	App.jsx
_Can only be one top level element (<h1> and <h2>), solve by wrapping them all in a fragment. <> </>
_Or you can use 							->	<React.Fragment> </React.Fragment> 


*React Props
_Props means passing the value in the components. Treat it as arguement. 
_Allow components to be reuse.
_Props are read only, you can not change props. You can only change props in the parent or source
_In summary, treat react Component and Props as Function() and Arguements, allowing you to customise HTML element rather than the predetermine tag (eg. placeholder, id, etc)

     Card.jsx
	function Card(props) {
	  <>
	   return {props.name}
	  </>
	}

     App.js
	return <Card name="item1"/>


*React Map
_Keys is an id value for props. Allow you to get that object (same concept as MongoDB)
_Key used in map, need to put key in the most parent element (React.Fragment)

     Card.jsx
	function Card(props) {
	  <>
	   return {props.name}
	  </>
	}

     App.js
	return <Card key={student.id} name="item1"/>


_How you normally do conditional	->	{value === 100 ? "Perfect" : "Not Perfect"}
_How you normally do loop		->	
						{
						  names.map( name => {
						     return <li> name </li>
						  })	
						}


*React Bootstrap
_Installation						->	npm install react-bootstrap bootstrap
_Import bootstrap to CSS. for className			->	import 'bootstrap/dist/css/bootstrap.min.css'
_Import Components					->	import Button from 'react-bootstrap/Button'
_Always put them at the top so App.css can render last!
_Put the component in className
_Grid System
_Components























